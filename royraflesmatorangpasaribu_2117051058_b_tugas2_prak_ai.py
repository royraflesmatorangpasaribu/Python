# -*- coding: utf-8 -*-
"""RoyRaflesMatorangPasaribu_2117051058_B_Tugas2_Prak_AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TQlyug6nfAlqIncW4JYk0Qz5-A9sMpPq
"""

'''
Tugas 2 Praktikum Kecerdasan Buatan (AI)
implementasi Informed Search -Greedy Shortest Path
Nama  : Roy Rafles Matorang Pasaribu
NPM   : 2117051058
Kelas : B 
'''
# jika run menggunakan visual studio code harus melakukan install 2 library berikut networkx dan matplotlib
# pip install networkx[default]         -> untuk install library networkx
import networkx as nx
# python -m pip install -U matplotlib   -> untuk install library matplotlib
import matplotlib.pyplot as plt

# mencari jalur terpendek dari maps (graph yg dibuat)
def jalurTerpendek(maps, asal, tujuan):
  result = []           # node dengan jarak terpendek akan disimpan ke dalam list
  result.append(asal)   # inisialisasi node pertama dengan nilai awal

  # menelusuri graph sampai tujuan ditemukan
  while tujuan not in result:
    current_node = result[-1]                            # -1 == list di index terakhir
    print("Node Terakhir : ", current_node)  
    jarak_terpendek = min(maps[current_node].values())   # cari local maximum (nilai/jarak terkecil dari node terakhir ke node selanjutnya), print ("Node Dengan Jarak Terpendek Dari Node Terakhir :|", jarak_terpendek)
    
    for node, jarak in maps[current_node].items():       # iterasi mencari node selanjutnya
      print("Node Selanjutnya :",node,"| Jarak :",jarak)
      if jarak == jarak_terpendek:
        # ambil node dengan jarak terpendek dan tambahkan ke list result, agar iterasi selanjutnya dimulai dari node sekarang.
        result.append(node)

  return result

# maps simple
simple_maps = {
    'A' : {'B': 6, 'C': 4},
    'B' : {'F': 8},
    'C' : {'D': 6},
    'D' : {'E': 6},
    'E' : {'F': 2}
}

# maps full
full_maps = {
    'A' : {'B': 6, 'C': 4},
    'B' : {'H': 8},
    'H' : {'I': 7},
    'C' : {'D': 6, 'E': 7},
    'E' : {'I': 12},
    'D' : {'F': 6, 'G': 5},
    'F' : {'H': 2},
    'G' : {'I': 7} 
}
         
# menggambar maps (graph)
def draw(maps):
  g = nx.DiGraph()
  color = []
  if(maps == int(1)):
    g.add_edge("A", "C", weight="4 km")
    g.add_edge("A", "B", weight="6 km")
    g.add_edge("C", "D", weight="6 km")
    g.add_edge("D", "E", weight="6 km")
    g.add_edge("E", "F", weight="2 km")
    g.add_edge("B", "F", weight="8 km")
    color = ['g','b','b','b','b','r']

  if(maps == int(2)):
    g.add_edge("A", "C", weight="4 km")
    g.add_edge("A", "B", weight="6 km")
    g.add_edge("C", "D", weight="6 km")
    g.add_edge("C", "E", weight="7 km")
    g.add_edge("D", "F", weight="6 km")
    g.add_edge("D", "G", weight="5 km")
    g.add_edge("F", "H", weight="2 km")
    g.add_edge("B", "H", weight="8 km")
    g.add_edge("E", "I", weight="12 km")
    g.add_edge("G", "I", weight="7 km")
    g.add_edge("H", "I", weight="7 km")
    color = ['g','b','b','b','b','b','b','b','r']
  
  pos = nx.shell_layout(g)    # tata letak (layout) melingkar yang menempatkan simpul (node) pada lingkaran konsentris
  edge_labels = { (u,v): d['weight'] for u,v,d in g.edges(data=True) }
  nx.draw_networkx_nodes(g,pos,node_size=1000, node_color=color)
  nx.draw_networkx_edges(g,pos)
  nx.draw_networkx_labels(g,pos)
  nx.draw_networkx_edge_labels(g,pos,edge_labels=edge_labels)
  plt.title("MAPS")
  plt.axis("off")
  plt.show()

# menu
def _main():
  pilih = int(input("Pilih Maps :\n1. Maps Simple \n2. Maps Full \n\n"))
  # menu 1
  if(pilih == 1):
    print("\nMaps Simple :")
    draw(pilih)
    maps = jalurTerpendek(simple_maps,"A","F")
    print ("\nJalur Dari 'A' ke 'F' :", maps)

  # menu 2
  if (pilih == 2):
    print("\nFull Maps :")
    draw(pilih)
    maps = jalurTerpendek(full_maps,"A","I")
    print ("\nJalur Dari 'A' ke 'I' :", maps)

if __name__ == '__main__':
  _main()

'''
# Note : 
jika Run menggunakan visual studio code 
untuk melanjutkan menampilkan hasil jalur dari maps 
harus di Close (klik (X)) terlebih dahulu saat gambar muncul (Figure 1), 
setelah itu baru akan muncul output jalur dari maps yang dicari
'''